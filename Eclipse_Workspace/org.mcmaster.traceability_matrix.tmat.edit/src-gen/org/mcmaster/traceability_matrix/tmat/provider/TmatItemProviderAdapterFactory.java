/**
 */
package org.mcmaster.traceability_matrix.tmat.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.mcmaster.traceability_matrix.tmat.util.TmatAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TmatItemProviderAdapterFactory extends TmatAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TmatItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.Traceability_Matrix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Traceability_MatrixItemProvider traceability_MatrixItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.Traceability_Matrix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceability_MatrixAdapter() {
		if (traceability_MatrixItemProvider == null) {
			traceability_MatrixItemProvider = new Traceability_MatrixItemProvider(this);
		}

		return traceability_MatrixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.ID} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IDItemProvider idItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.ID}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIDAdapter() {
		if (idItemProvider == null) {
			idItemProvider = new IDItemProvider(this);
		}

		return idItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.Requirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementItemProvider requirementItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.Requirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementAdapter() {
		if (requirementItemProvider == null) {
			requirementItemProvider = new RequirementItemProvider(this);
		}

		return requirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.Approval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApprovalItemProvider approvalItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.Approval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApprovalAdapter() {
		if (approvalItemProvider == null) {
			approvalItemProvider = new ApprovalItemProvider(this);
		}

		return approvalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.Comments} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentsItemProvider commentsItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.Comments}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentsAdapter() {
		if (commentsItemProvider == null) {
			commentsItemProvider = new CommentsItemProvider(this);
		}

		return commentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.Scope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScopeItemProvider scopeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.Scope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScopeAdapter() {
		if (scopeItemProvider == null) {
			scopeItemProvider = new ScopeItemProvider(this);
		}

		return scopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.SatisfiabilityCheck} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SatisfiabilityCheckItemProvider satisfiabilityCheckItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.SatisfiabilityCheck}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSatisfiabilityCheckAdapter() {
		if (satisfiabilityCheckItemProvider == null) {
			satisfiabilityCheckItemProvider = new SatisfiabilityCheckItemProvider(this);
		}

		return satisfiabilityCheckItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.Source} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceItemProvider sourceItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.Source}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceAdapter() {
		if (sourceItemProvider == null) {
			sourceItemProvider = new SourceItemProvider(this);
		}

		return sourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.Status} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatusItemProvider statusItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.Status}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatusAdapter() {
		if (statusItemProvider == null) {
			statusItemProvider = new StatusItemProvider(this);
		}

		return statusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.UnitTest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitTestItemProvider unitTestItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.UnitTest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitTestAdapter() {
		if (unitTestItemProvider == null) {
			unitTestItemProvider = new UnitTestItemProvider(this);
		}

		return unitTestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.SystemTest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemTestItemProvider systemTestItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.SystemTest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemTestAdapter() {
		if (systemTestItemProvider == null) {
			systemTestItemProvider = new SystemTestItemProvider(this);
		}

		return systemTestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.PerformanceTest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerformanceTestItemProvider performanceTestItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.PerformanceTest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerformanceTestAdapter() {
		if (performanceTestItemProvider == null) {
			performanceTestItemProvider = new PerformanceTestItemProvider(this);
		}

		return performanceTestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.traceability_matrix.tmat.UserAcceptanceTest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserAcceptanceTestItemProvider userAcceptanceTestItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.traceability_matrix.tmat.UserAcceptanceTest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAcceptanceTestAdapter() {
		if (userAcceptanceTestItemProvider == null) {
			userAcceptanceTestItemProvider = new UserAcceptanceTestItemProvider(this);
		}

		return userAcceptanceTestItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (traceability_MatrixItemProvider != null)
			traceability_MatrixItemProvider.dispose();
		if (idItemProvider != null)
			idItemProvider.dispose();
		if (requirementItemProvider != null)
			requirementItemProvider.dispose();
		if (approvalItemProvider != null)
			approvalItemProvider.dispose();
		if (commentsItemProvider != null)
			commentsItemProvider.dispose();
		if (scopeItemProvider != null)
			scopeItemProvider.dispose();
		if (componentItemProvider != null)
			componentItemProvider.dispose();
		if (satisfiabilityCheckItemProvider != null)
			satisfiabilityCheckItemProvider.dispose();
		if (sourceItemProvider != null)
			sourceItemProvider.dispose();
		if (statusItemProvider != null)
			statusItemProvider.dispose();
		if (unitTestItemProvider != null)
			unitTestItemProvider.dispose();
		if (systemTestItemProvider != null)
			systemTestItemProvider.dispose();
		if (performanceTestItemProvider != null)
			performanceTestItemProvider.dispose();
		if (userAcceptanceTestItemProvider != null)
			userAcceptanceTestItemProvider.dispose();
	}

}
