/*
 * generated by Xtext 2.32.0
 */
package org.xtext.mcmaster.requirements.gherkin.rgh.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.mcmaster.requirements.gherkin.rgh.ide.contentassist.antlr.internal.InternalRghParser;
import org.xtext.mcmaster.requirements.gherkin.rgh.services.RghGrammarAccess;

public class RghParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RghGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RghGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStepsAccess().getAlternatives(), "rule__Steps__Alternatives");
			builder.put(grammarAccess.getContextAccess().getAlternatives(), "rule__Context__Alternatives");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getGivenAccess().getGroup(), "rule__Given__Group__0");
			builder.put(grammarAccess.getWhenAccess().getGroup(), "rule__When__Group__0");
			builder.put(grammarAccess.getThenAccess().getGroup(), "rule__Then__Group__0");
			builder.put(grammarAccess.getPreconditionAccess().getGroup(), "rule__Precondition__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
			builder.put(grammarAccess.getPostconditionAccess().getGroup(), "rule__Postcondition__Group__0");
			builder.put(grammarAccess.getModelAccess().getRequirementAssignment(), "rule__Model__RequirementAssignment");
			builder.put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
			builder.put(grammarAccess.getOperationAccess().getNameAssignment_1(), "rule__Operation__NameAssignment_1");
			builder.put(grammarAccess.getGivenAccess().getPreconditionsAssignment_3(), "rule__Given__PreconditionsAssignment_3");
			builder.put(grammarAccess.getWhenAccess().getEventsAssignment_3(), "rule__When__EventsAssignment_3");
			builder.put(grammarAccess.getThenAccess().getPostconditionsAssignment_3(), "rule__Then__PostconditionsAssignment_3");
			builder.put(grammarAccess.getPreconditionAccess().getNameAssignment_1(), "rule__Precondition__NameAssignment_1");
			builder.put(grammarAccess.getPreconditionAccess().getDescriptionAssignment_3(), "rule__Precondition__DescriptionAssignment_3");
			builder.put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
			builder.put(grammarAccess.getEventAccess().getDescriptionAssignment_3(), "rule__Event__DescriptionAssignment_3");
			builder.put(grammarAccess.getPostconditionAccess().getNameAssignment_1(), "rule__Postcondition__NameAssignment_1");
			builder.put(grammarAccess.getPostconditionAccess().getDescriptionAssignment_3(), "rule__Postcondition__DescriptionAssignment_3");
			builder.put(grammarAccess.getDescriptionAccess().getValueAssignment(), "rule__Description__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RghGrammarAccess grammarAccess;

	@Override
	protected InternalRghParser createParser() {
		InternalRghParser result = new InternalRghParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RghGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RghGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
