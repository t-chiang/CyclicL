/*
 * generated by Xtext 2.30.0
 */
grammar InternalRgh;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.mcmaster.requirements.gherkin.rgh.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.mcmaster.requirements.gherkin.rgh.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.mcmaster.requirements.gherkin.rgh.services.RghGrammarAccess;

}
@parser::members {
	private RghGrammarAccess grammarAccess;

	public void setGrammarAccess(RghGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getRequirementAssignment()); }
		(rule__Model__RequirementAssignment)*
		{ after(grammarAccess.getModelAccess().getRequirementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSteps
entryRuleSteps
:
{ before(grammarAccess.getStepsRule()); }
	 ruleSteps
{ after(grammarAccess.getStepsRule()); } 
	 EOF 
;

// Rule Steps
ruleSteps 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepsAccess().getAlternatives()); }
		(rule__Steps__Alternatives)
		{ after(grammarAccess.getStepsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGiven
entryRuleGiven
:
{ before(grammarAccess.getGivenRule()); }
	 ruleGiven
{ after(grammarAccess.getGivenRule()); } 
	 EOF 
;

// Rule Given
ruleGiven 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGivenAccess().getGroup()); }
		(rule__Given__Group__0)
		{ after(grammarAccess.getGivenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhen
entryRuleWhen
:
{ before(grammarAccess.getWhenRule()); }
	 ruleWhen
{ after(grammarAccess.getWhenRule()); } 
	 EOF 
;

// Rule When
ruleWhen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhenAccess().getGroup()); }
		(rule__When__Group__0)
		{ after(grammarAccess.getWhenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleThen
entryRuleThen
:
{ before(grammarAccess.getThenRule()); }
	 ruleThen
{ after(grammarAccess.getThenRule()); } 
	 EOF 
;

// Rule Then
ruleThen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getThenAccess().getGroup()); }
		(rule__Then__Group__0)
		{ after(grammarAccess.getThenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrecondition
entryRulePrecondition
:
{ before(grammarAccess.getPreconditionRule()); }
	 rulePrecondition
{ after(grammarAccess.getPreconditionRule()); } 
	 EOF 
;

// Rule Precondition
rulePrecondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreconditionAccess().getGroup()); }
		(rule__Precondition__Group__0)
		{ after(grammarAccess.getPreconditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getGroup()); }
		(rule__Event__Group__0)
		{ after(grammarAccess.getEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePostcondition
entryRulePostcondition
:
{ before(grammarAccess.getPostconditionRule()); }
	 rulePostcondition
{ after(grammarAccess.getPostconditionRule()); } 
	 EOF 
;

// Rule Postcondition
rulePostcondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPostconditionAccess().getGroup()); }
		(rule__Postcondition__Group__0)
		{ after(grammarAccess.getPostconditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDescription
entryRuleDescription
:
{ before(grammarAccess.getDescriptionRule()); }
	 ruleDescription
{ after(grammarAccess.getDescriptionRule()); } 
	 EOF 
;

// Rule Description
ruleDescription 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDescriptionAccess().getValueAssignment()); }
		(rule__Description__ValueAssignment)
		{ after(grammarAccess.getDescriptionAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Steps__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepsAccess().getGivenParserRuleCall_0()); }
		ruleGiven
		{ after(grammarAccess.getStepsAccess().getGivenParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStepsAccess().getWhenParserRuleCall_1()); }
		ruleWhen
		{ after(grammarAccess.getStepsAccess().getWhenParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStepsAccess().getThenParserRuleCall_2()); }
		ruleThen
		{ after(grammarAccess.getStepsAccess().getThenParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Given__Group__0__Impl
	rule__Given__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGivenAccess().getGivenKeyword_0()); }
	'Given'
	{ after(grammarAccess.getGivenAccess().getGivenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Given__Group__1__Impl
	rule__Given__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGivenAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getGivenAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Given__Group__2__Impl
	rule__Given__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGivenAccess().getPreconditionsAssignment_2()); }
	(rule__Given__PreconditionsAssignment_2)*
	{ after(grammarAccess.getGivenAccess().getPreconditionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Given__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGivenAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getGivenAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__When__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__0__Impl
	rule__When__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getWhenKeyword_0()); }
	'When'
	{ after(grammarAccess.getWhenAccess().getWhenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__1__Impl
	rule__When__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getWhenAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__2__Impl
	rule__When__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getEventsAssignment_2()); }
	(rule__When__EventsAssignment_2)*
	{ after(grammarAccess.getWhenAccess().getEventsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getWhenAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Then__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Then__Group__0__Impl
	rule__Then__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThenAccess().getThenKeyword_0()); }
	'Then'
	{ after(grammarAccess.getThenAccess().getThenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Then__Group__1__Impl
	rule__Then__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThenAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getThenAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Then__Group__2__Impl
	rule__Then__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThenAccess().getPostconditionsAssignment_2()); }
	(rule__Then__PostconditionsAssignment_2)*
	{ after(grammarAccess.getThenAccess().getPostconditionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Then__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThenAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getThenAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Precondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Precondition__Group__0__Impl
	rule__Precondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionAccess().getPreconditionKeyword_0()); }
	'Precondition'
	{ after(grammarAccess.getPreconditionAccess().getPreconditionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Precondition__Group__1__Impl
	rule__Precondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionAccess().getNameAssignment_1()); }
	(rule__Precondition__NameAssignment_1)
	{ after(grammarAccess.getPreconditionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Precondition__Group__2__Impl
	rule__Precondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getPreconditionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Precondition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionAccess().getDescriptionAssignment_3()); }
	(rule__Precondition__DescriptionAssignment_3)
	{ after(grammarAccess.getPreconditionAccess().getDescriptionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getEventKeyword_0()); }
	'Event'
	{ after(grammarAccess.getEventAccess().getEventKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getNameAssignment_1()); }
	(rule__Event__NameAssignment_1)
	{ after(grammarAccess.getEventAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__2__Impl
	rule__Event__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getEventAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getDescriptionAssignment_3()); }
	(rule__Event__DescriptionAssignment_3)
	{ after(grammarAccess.getEventAccess().getDescriptionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Postcondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Postcondition__Group__0__Impl
	rule__Postcondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostconditionAccess().getPostconditionKeyword_0()); }
	'Postcondition'
	{ after(grammarAccess.getPostconditionAccess().getPostconditionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Postcondition__Group__1__Impl
	rule__Postcondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostconditionAccess().getNameAssignment_1()); }
	(rule__Postcondition__NameAssignment_1)
	{ after(grammarAccess.getPostconditionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Postcondition__Group__2__Impl
	rule__Postcondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostconditionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getPostconditionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Postcondition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostconditionAccess().getDescriptionAssignment_3()); }
	(rule__Postcondition__DescriptionAssignment_3)
	{ after(grammarAccess.getPostconditionAccess().getDescriptionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__RequirementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getRequirementStepsParserRuleCall_0()); }
		ruleSteps
		{ after(grammarAccess.getModelAccess().getRequirementStepsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Given__PreconditionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGivenAccess().getPreconditionsPreconditionParserRuleCall_2_0()); }
		rulePrecondition
		{ after(grammarAccess.getGivenAccess().getPreconditionsPreconditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__EventsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getEventsEventParserRuleCall_2_0()); }
		ruleEvent
		{ after(grammarAccess.getWhenAccess().getEventsEventParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Then__PostconditionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getThenAccess().getPostconditionsPostconditionParserRuleCall_2_0()); }
		rulePostcondition
		{ after(grammarAccess.getThenAccess().getPostconditionsPostconditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreconditionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPreconditionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__DescriptionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreconditionAccess().getDescriptionDescriptionParserRuleCall_3_0()); }
		ruleDescription
		{ after(grammarAccess.getPreconditionAccess().getDescriptionDescriptionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__DescriptionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getDescriptionDescriptionParserRuleCall_3_0()); }
		ruleDescription
		{ after(grammarAccess.getEventAccess().getDescriptionDescriptionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostconditionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPostconditionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__DescriptionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostconditionAccess().getDescriptionDescriptionParserRuleCall_3_0()); }
		ruleDescription
		{ after(grammarAccess.getPostconditionAccess().getDescriptionDescriptionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDescriptionAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getDescriptionAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
