/**
 */
package org.mcmaster.requirements_modelling.rmdl.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.mcmaster.requirements_modelling.rmdl.util.RmdlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RmdlItemProviderAdapterFactory extends RmdlAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RmdlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.Functional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionalItemProvider functionalItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.Functional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionalAdapter() {
		if (functionalItemProvider == null) {
			functionalItemProvider = new FunctionalItemProvider(this);
		}

		return functionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.Qualitative} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualitativeItemProvider qualitativeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.Qualitative}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualitativeAdapter() {
		if (qualitativeItemProvider == null) {
			qualitativeItemProvider = new QualitativeItemProvider(this);
		}

		return qualitativeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.Requirement_Diagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Requirement_DiagramItemProvider requirement_DiagramItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.Requirement_Diagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirement_DiagramAdapter() {
		if (requirement_DiagramItemProvider == null) {
			requirement_DiagramItemProvider = new Requirement_DiagramItemProvider(this);
		}

		return requirement_DiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.Safety} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SafetyItemProvider safetyItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.Safety}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSafetyAdapter() {
		if (safetyItemProvider == null) {
			safetyItemProvider = new SafetyItemProvider(this);
		}

		return safetyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.DesignElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DesignElementItemProvider designElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.DesignElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDesignElementAdapter() {
		if (designElementItemProvider == null) {
			designElementItemProvider = new DesignElementItemProvider(this);
		}

		return designElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.TestCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCaseItemProvider testCaseItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.TestCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCaseAdapter() {
		if (testCaseItemProvider == null) {
			testCaseItemProvider = new TestCaseItemProvider(this);
		}

		return testCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.Review} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReviewItemProvider reviewItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.Review}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReviewAdapter() {
		if (reviewItemProvider == null) {
			reviewItemProvider = new ReviewItemProvider(this);
		}

		return reviewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.ProductFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductFeatureItemProvider productFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.ProductFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductFeatureAdapter() {
		if (productFeatureItemProvider == null) {
			productFeatureItemProvider = new ProductFeatureItemProvider(this);
		}

		return productFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.Feature_Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Feature_ModelItemProvider feature_ModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.Feature_Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeature_ModelAdapter() {
		if (feature_ModelItemProvider == null) {
			feature_ModelItemProvider = new Feature_ModelItemProvider(this);
		}

		return feature_ModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mcmaster.requirements_modelling.rmdl.RMDL_Root} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RMDL_RootItemProvider rmdL_RootItemProvider;

	/**
	 * This creates an adapter for a {@link org.mcmaster.requirements_modelling.rmdl.RMDL_Root}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRMDL_RootAdapter() {
		if (rmdL_RootItemProvider == null) {
			rmdL_RootItemProvider = new RMDL_RootItemProvider(this);
		}

		return rmdL_RootItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (functionalItemProvider != null)
			functionalItemProvider.dispose();
		if (qualitativeItemProvider != null)
			qualitativeItemProvider.dispose();
		if (constraintItemProvider != null)
			constraintItemProvider.dispose();
		if (requirement_DiagramItemProvider != null)
			requirement_DiagramItemProvider.dispose();
		if (safetyItemProvider != null)
			safetyItemProvider.dispose();
		if (designElementItemProvider != null)
			designElementItemProvider.dispose();
		if (testCaseItemProvider != null)
			testCaseItemProvider.dispose();
		if (reviewItemProvider != null)
			reviewItemProvider.dispose();
		if (productFeatureItemProvider != null)
			productFeatureItemProvider.dispose();
		if (feature_ModelItemProvider != null)
			feature_ModelItemProvider.dispose();
		if (rmdL_RootItemProvider != null)
			rmdL_RootItemProvider.dispose();
	}

}
